#!/bin/bash

METHOD_PERMITE="declaracion/permite"
METHOD_PRESENTAR="presentar"

# Tax form related data
FORM_AFFIDAVIT=SG00005
TAX="211"
FORM="120"

# Necessary step to be able to create form later
echo "Preparing tax form..."

METHOD_TAXPAYER=$(echo $MENU | jq --raw-output '.[] | select(.aplicacion == "'$FORM_AFFIDAVIT'") | .url')

random_sleep
TAXPAYER=$(wget $WGET_FLAGS $WGET_OUTPUT --load-cookies $COOKIES_FILE --user-agent="$UA" "$URL_BASE/$METHOD_TAXPAYER")

if ! echo $TAXPAYER | grep -q "Presentar DeclaraciÃ³n"; then
  send_message "Error" "Tax payer not found"
  return 1
fi

# Create tax form and get its url
echo "Retrieving tax form..."

PERIOD=$1
TOKEN_PERMIT=$(encrypt '{"ruc":"'$CEDULA'","dv":"'$DV'","periodo":"'$PERIOD'","impuesto":"'$TAX'","formulario":"'$FORM'","fechaDiferida":null}')
TOKEN_PERMIT=$(urlencode $TOKEN_PERMIT)

random_sleep
PERMIT=$(wget $WGET_FLAGS $WGET_OUTPUT --load-cookies $COOKIES_FILE --user-agent="$UA" "$URL_BASE/$METHOD_PERMITE?t3=$TOKEN_PERMIT")

IS_PERMITED=$(echo $PERMIT | jq --raw-output '.permite')

if [[ "$IS_PERMITED" = "false" ]]; then
  send_message "Error" "Tax form could not be retreived"
  return 1
fi

# Load tax form
PERMIT_URL=$(echo $PERMIT | jq --raw-output '.url')
DECLARATION_FORM=$(wget $WGET_FLAGS $WGET_OUTPUT --load-cookies $COOKIES_FILE --user-agent="$UA" $HEADER "$URL_HOST$PERMIT_URL")

# Get name and value from HTML inputs
NAMES=$(xmllint --html --xpath "//input/@name" 2>/dev/null - <<< "$DECLARATION_FORM")
NAMES=$(echo $NAMES | sed 's/\s*name="dynamicProps(\([^"]*\))"/\1\n/g') # Remove dynamicProps()

VALUES=$(xmllint --html --xpath "//input/@value" 2>/dev/null - <<< "$DECLARATION_FORM")
VALUES=$(echo $VALUES | sed 's/value=""/value="null"\n/g') # Add null to empty string for better parsing later
VALUES=$(echo $VALUES | sed 's/\s*value="\([^"]*\)"/\1\n/g')

# Create arrays from the HTML inputs
set -f # Avoid globbing (expansion of *)
NAMES_ARR=(${NAMES// / })
VALUES_ARR=(${VALUES// / })
set +f

# Get the form's _cyp token
CYP=$(echo $PERMIT_URL | awk -F'[=&]' '{print $2}')

# Create a temporary json file for easier json operations
TMP_JSON=/tmp/tmp.json
rm -rf $TMP_JSON
touch $TMP_JSON

# Create JSON with _cyp
echo '{"_cyp":"'$CYP'"}' > $TMP_JSON

echo "Please wait! Processing tax form data..."
for I in "${!NAMES_ARR[@]}"; do
  NAME=${NAMES_ARR[I]}
  VALUE=${VALUES_ARR[I]:=0}

  # If middle name doesn't exists use empty string
  if [[ "$NAME" = "segundoApellido" && "$VALUE" = "0" ]]; then
    VALUE=""
  fi

  # Not used
  if [[ "$NAME" = "fechaDiferida" ]]; then
    VALUE=""
  fi

  # Manually added field
  if [[ "$NAME" = "exportador" ]]; then
    VALUE="0"
  fi

  if [[ "$NAME" != "C2" && "$NAME" != "C3" && "$VALUE" != "null" ]]; then
    echo $(jq --arg name "$NAME" --arg value "$VALUE" '.[$name] = $value' $TMP_JSON) > $TMP_JSON
  fi
done

# Remove spaces. Can't use jq because it adds slashes infront of "
echo $(cat $TMP_JSON | sed 's/ //g') > $TMP_JSON

DATA=$(cat $TMP_JSON)

# Temporary json file no longer needed
rm -rf $TMP_JSON

# TODO: submit the form and get a response
echo "Sending tax form..."
random_sleep
FINAL=$(wget $WGET_FLAGS $WGET_OUTPUT --load-cookies $COOKIES_FILE --header='Content-Type:application/json' --user-agent="$UA" --post-data=$DATA "$URL_BASE/$METHOD_PRESENTAR")

STATUS=$(echo $FINAL | jq --raw-output '.exito' 2>/dev/null)

if [[ "$STATUS" = "false" ]]; then
  ERROR=$(echo $FINAL | jq --raw-output '.operacion.errores[0].descripcion' 2>/dev/null)

  send_message "Error" "$ERROR"
  return 1
else
  MESSAGE="VAT filed successfully!"

  send_message "Success!" "$MESSAGE"
  return 0
fi